[
  {
    "path": "lib/auth/authentication_service.dart",
    "content": "import 'dart:async';\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\n\nclass AuthenticationService {\n  final StreamController<User?> _streamController;\n\n  AuthenticationService() : _streamController = StreamController() {\n    FirebaseAuth.instance.authStateChanges().listen((event) {\n      _streamController.add(event);\n    });\n  }\n\n  Stream<User?> get authStateChanges => _streamController.stream;\n\n  void pushToStream(User? user) {\n    _streamController.add(user);\n  }\n\n  Future<void> signIn({required String email, required String password}) async {\n    await FirebaseAuth.instance.signInWithEmailAndPassword(email: email, password: password);\n  }\n\n  Future<UserCredential> signInWithGoogle() async {\n    // Trigger the authentication flow\n    final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();\n\n    // Obtain the auth details from the request\n    final GoogleSignInAuthentication? googleAuth = await googleUser?.authentication;\n\n    // Create a new credential\n    final credential = GoogleAuthProvider.credential(\n      accessToken: googleAuth?.accessToken,\n      idToken: googleAuth?.idToken,\n    );\n\n    // Once signed in, return the UserCredential\n    return await FirebaseAuth.instance.signInWithCredential(credential);\n  }\n\n  Future<void> signUp({required String email, required String password}) async {\n    UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(email: email, password: password);\n    await userCredential.user?.sendEmailVerification();\n  }\n\n  Future<void> signOut() async {\n    await FirebaseAuth.instance.signOut();\n  }\n\n  Future<void> deleteAccount() async {\n    try {\n      await FirebaseAuth.instance.currentUser?.delete();\n    } catch (e) {}\n  }\n\n  Future<void> sendVerificationEmail() async {\n    await FirebaseAuth.instance.currentUser?.sendEmailVerification();\n  }\n\n  Future<void> sendResetPasswordEmail(String email) async {\n    await FirebaseAuth.instance.sendPasswordResetEmail(email: email);\n  }\n\n  Future<User?> reload() async {\n    await FirebaseAuth.instance.currentUser?.reload();\n    return FirebaseAuth.instance.currentUser;\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/auth/authentication_wrapper.dart",
    "content": "import 'package:auth_tutorial/auth/unauthenticated.dart';\nimport 'package:auth_tutorial/auth/verify.dart';\nimport 'package:auth_tutorial/database_service.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nimport '../home.dart';\nimport 'authentication_service.dart';\n\nclass AuthenticationWrapper extends StatelessWidget {\n  const AuthenticationWrapper({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        Provider<AuthenticationService>(\n          create: (_) => AuthenticationService(),\n        ),\n        StreamProvider<User?>(\n          create: (context) => context.read<AuthenticationService>().authStateChanges,\n          initialData: null,\n        ),\n      ],\n      child: ((User? user) => user != null\n          ? user.emailVerified\n              ? Home(databaseService: DatabaseService(user: user))\n              : Verify(email: user.email!)\n          : const Unauthenticated())(context.watch<User?>()),\n    );\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/auth/reset_password.dart",
    "content": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rounded_loading_button/rounded_loading_button.dart';\n\nimport 'authentication_service.dart';\n\nclass ResetPassword extends StatefulWidget {\n  final _emailController = TextEditingController();\n  final _emailValidationKey = GlobalKey<FormState>();\n  final _btnController = RoundedLoadingButtonController();\n\n  ResetPassword({Key? key}) : super(key: key);\n\n  @override\n  State<ResetPassword> createState() => _ResetPasswordState();\n}\n\nclass _ResetPasswordState extends State<ResetPassword> {\n  late String? _serviceErrorCode;\n  late bool _shouldValidateEmail;\n  late Status _status;\n\n  String getServiceErrorMessage(String code) {\n    switch (code) {\n      case \"invalid-email\":\n        return \"The email you provided is invalid. Please try again with a different email address.\";\n      case \"user-not-found\":\n        return \"Account ${widget._emailController.text} not found.\";\n      case \"missing-android-pkg-name\":\n      case \"missing-continue-uri\":\n      case \"unauthorized-continue-uri\":\n      case \"invalid-continue-uri\":\n      case \"missing-ios-bundle-id\":\n        return \"Sorry, something went wrong on our end. Please try again later.\";\n      default:\n        return \"Please check your network connection and try again.\";\n    }\n  }\n\n  @override\n  void initState() {\n    _serviceErrorCode = null;\n    _shouldValidateEmail = false;\n    _status = Status.sendEmail;\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    widget._emailController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      title: const Text(\n        \"Reset your password\",\n        style: TextStyle(fontSize: 24),\n      ),\n      content: Padding(\n          padding: const EdgeInsets.all(8),\n          child: Column(mainAxisAlignment: MainAxisAlignment.center, mainAxisSize: MainAxisSize.min, children: [\n            if (_serviceErrorCode != null) ...[\n              Padding(\n                padding: const EdgeInsets.only(bottom: 10),\n                child: MaterialBanner(\n                    content: Text(\n                      getServiceErrorMessage(_serviceErrorCode!),\n                    ),\n                    backgroundColor: Colors.red.withOpacity(0.5),\n                    actions: [\n                      IconButton(\n                        onPressed: () {\n                          setState(() {\n                            _serviceErrorCode = null;\n                          });\n                        },\n                        icon: const Icon(Icons.close),\n                      )\n                    ]),\n              )\n            ],\n            if (_status == Status.sendEmail) ...[\n              const Padding(\n                padding: EdgeInsets.only(bottom: 5),\n                child: Align(alignment: Alignment.topLeft, child: Text(\"Enter the email you log in with and we'll send you a link to reset your password\")),\n              ),\n              Focus(\n                onFocusChange: (hasFocus) {\n                  if (!hasFocus) {\n                    setState(() {\n                      _shouldValidateEmail = true;\n                    });\n                  } else if (hasFocus && _serviceErrorCode != null) {\n                    setState(() {\n                      _serviceErrorCode = null;\n                    });\n                  }\n                },\n                child: Form(\n                  key: widget._emailValidationKey,\n                  child: TextFormField(\n                    autovalidateMode: _shouldValidateEmail ? AutovalidateMode.always : AutovalidateMode.disabled,\n                    controller: widget._emailController,\n                    keyboardType: TextInputType.emailAddress,\n                    maxLines: 1,\n                    validator: (value) {\n                      if (value == null || value.isEmpty) {\n                        return \"Please enter your email address\";\n                      }\n\n                      return null;\n                    },\n                    textInputAction: TextInputAction.next,\n                    decoration: const InputDecoration(\n                      errorMaxLines: 2,\n                      errorBorder: OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      focusedErrorBorder: OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      hintText: \"Email\",\n                    ),\n                  ),\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.only(top: 5),\n                child: RoundedLoadingButton(\n                  height: 40,\n                  loaderSize: 20,\n                  controller: widget._btnController,\n                  onPressed: () async {\n                    if (widget._emailValidationKey.currentState!.validate()) {\n                      try {\n                        await context.read<AuthenticationService>().sendResetPasswordEmail(widget._emailController.text.trim());\n                        setState(() {\n                          _status = Status.emailSent;\n                        });\n                        widget._btnController.success();\n                      } on FirebaseAuthException catch (e) {\n                        widget._btnController.reset();\n                        setState(() {\n                          _serviceErrorCode = e.code;\n                        });\n                      }\n                    } else {\n                      widget._btnController.reset();\n                    }\n                  },\n                  child: const Text(\"Send\"),\n                ),\n              ),\n            ] else if (_status == Status.emailSent) ...[\n              Text(\"We've sent an email containing a link to reset your password to ${widget._emailController.text.trim()}\"),\n              ElevatedButton(\n                  onPressed: () {\n                    Navigator.of(context).pop();\n                  },\n                  child: const Text(\"Log in\"))\n            ],\n          ])),\n    );\n  }\n}\n\nenum Status { sendEmail, emailSent }",
    "language": "dart"
  },
  {
    "path": "lib/auth/sign_in.dart",
    "content": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:loader_overlay/loader_overlay.dart';\nimport 'package:provider/src/provider.dart';\n\nimport 'authentication_service.dart';\nimport 'reset_password.dart';\nimport 'social/google_sign_in_button.dart';\n\nclass SignIn extends StatefulWidget {\n  final _emailValidationKey = GlobalKey<FormState>();\n  final _passwordValidationKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n\n  SignIn({Key? key}) : super(key: key);\n\n  @override\n  State<SignIn> createState() => _SignInState();\n}\n\nclass _SignInState extends State<SignIn> {\n  late String? _serviceErrorCode;\n  late bool _shouldValidateEmail;\n  late bool _shouldValidatePassword;\n  late bool _obscured;\n\n  @override\n  void dispose() {\n    widget._emailController.dispose();\n    widget._passwordController.dispose();\n    super.dispose();\n  }\n\n  String getServiceErrorMessage(String code) {\n    switch (code) {\n      case \"invalid-email\":\n        return \"The email you provided is invalid. Please try again with a different email address.\";\n      case \"user-disabled\":\n        return \"Account ${widget._emailController.text} has been disabled.\";\n      case \"user-not-found\":\n        return \"Account ${widget._emailController.text} not found.\";\n      case \"wrong-password\":\n        return \"The password you've entered is incorrect.\";\n      default:\n        return \"Please check your network connection and try again.\";\n    }\n  }\n\n  @override\n  void initState() {\n    _serviceErrorCode = null;\n    _shouldValidateEmail = false;\n    _shouldValidatePassword = false;\n    _obscured = true;\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.all(8.0),\n      child: Card(\n        child: Padding(\n          padding: const EdgeInsets.all(12.0),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Align(\n                alignment: Alignment.topLeft,\n                child: Text(\n                  \"Log in\",\n                  style: TextStyle(fontSize: 24),\n                ),\n              ),\n              const GoogleSignInButton(),\n              const Divider(),\n              if (_serviceErrorCode != null) ...[\n                Padding(\n                  padding: const EdgeInsets.only(top: 5),\n                  child: MaterialBanner(\n                      content: Text(\n                        getServiceErrorMessage(_serviceErrorCode!),\n                      ),\n                      backgroundColor: Colors.red.withOpacity(0.5),\n                      actions: [\n                        IconButton(\n                          onPressed: () {\n                            setState(() {\n                              _serviceErrorCode = null;\n                            });\n                          },\n                          icon: const Icon(Icons.close),\n                        )\n                      ]),\n                )\n              ],\n              const SizedBox(height: 15),\n              Focus(\n                onFocusChange: (hasFocus) {\n                  if (!hasFocus) {\n                    setState(() {\n                      _shouldValidateEmail = true;\n                    });\n                  } else if (hasFocus && _serviceErrorCode != null) {\n                    setState(() {\n                      _serviceErrorCode = null;\n                    });\n                  }\n                },\n                child: Form(\n                  key: widget._emailValidationKey,\n                  child: TextFormField(\n                    autovalidateMode: _shouldValidateEmail ? AutovalidateMode.always : AutovalidateMode.disabled,\n                    controller: widget._emailController,\n                    keyboardType: TextInputType.emailAddress,\n                    maxLines: 1,\n                    validator: (value) {\n                      if (value == null || value.isEmpty) {\n                        return \"Please enter your email address\";\n                      }\n\n                      return null;\n                    },\n                    textInputAction: TextInputAction.next,\n                    decoration: const InputDecoration(\n                      errorMaxLines: 2,\n                      errorBorder: OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      focusedErrorBorder: OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      hintText: \"Email\",\n                    ),\n                  ),\n                ),\n              ),\n              Focus(\n                onFocusChange: (hasFocus) {\n                  if (!hasFocus) {\n                    setState(() {\n                      _shouldValidatePassword = true;\n                    });\n                  } else if (hasFocus && _serviceErrorCode != null) {\n                    setState(() {\n                      _serviceErrorCode = null;\n                    });\n                  }\n                },\n                child: Form(\n                  key: widget._passwordValidationKey,\n                  child: TextFormField(\n                    autovalidateMode: _shouldValidatePassword ? AutovalidateMode.always : AutovalidateMode.disabled,\n                    controller: widget._passwordController,\n                    enableSuggestions: false,\n                    autocorrect: false,\n                    obscureText: _obscured,\n                    keyboardType: TextInputType.visiblePassword,\n                    maxLines: 1,\n                    validator: (value) {\n                      if (value == null || value.isEmpty) {\n                        return \"Please enter your password\";\n                      }\n\n                      return null;\n                    },\n                    textInputAction: TextInputAction.done,\n                    decoration: InputDecoration(\n                      suffixIcon: Padding(\n                        padding: const EdgeInsets.fromLTRB(0, 0, 4, 0),\n                        child: GestureDetector(\n                          onTap: () {\n                            setState(() {\n                              _obscured = !_obscured;\n                            });\n                          },\n                          child: Icon(\n                            _obscured ? Icons.visibility_rounded : Icons.visibility_off_rounded,\n                            size: 24,\n                          ),\n                        ),\n                      ),\n                      errorMaxLines: 2,\n                      errorBorder: const OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      focusedErrorBorder: const OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      hintText: \"Password\",\n                    ),\n                  ),\n                ),\n              ),\n              ElevatedButton(\n                style: ElevatedButton.styleFrom(\n                  minimumSize: const Size.fromHeight(40),\n                ),\n                onPressed: () async {\n                  if (widget._emailValidationKey.currentState!.validate() && widget._passwordValidationKey.currentState!.validate()) {\n                    try {\n                      context.loaderOverlay.show();\n                      await context.read<AuthenticationService>().signIn(\n                            email: widget._emailController.text.trim(),\n                            password: widget._passwordController.text.trim(),\n                          );\n                    } on FirebaseAuthException catch (e) {\n                      setState(() {\n                        _serviceErrorCode = e.code;\n                      });\n                    } finally {\n                      context.loaderOverlay.hide();\n                    }\n                  }\n                },\n                child: const Text(\"Log in\"),\n              ),\n              Align(\n                alignment: Alignment.center,\n                child: TextButton(\n                  child: const Text(\"Forgot your password?\"),\n                  onPressed: () {\n                    showDialog(context: context, builder: (context) => ResetPassword());\n                  },\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/auth/sign_up.dart",
    "content": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:loader_overlay/loader_overlay.dart';\nimport 'package:provider/src/provider.dart';\n\nimport 'authentication_service.dart';\n\nclass SignUp extends StatefulWidget {\n  final _emailValidationKey = GlobalKey<FormState>();\n  final _passwordValidationKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n\n  SignUp({Key? key}) : super(key: key);\n\n  @override\n  State<SignUp> createState() => _SignUpState();\n}\n\nclass _SignUpState extends State<SignUp> {\n  late String? _serviceErrorCode;\n  late bool _shouldValidateEmail;\n  late bool _shouldValidatePassword;\n  late bool _obscured;\n\n  @override\n  void dispose() {\n    widget._emailController.dispose();\n    widget._passwordController.dispose();\n    super.dispose();\n  }\n\n  String getServiceErrorMessage(String code) {\n    switch (code) {\n      case \"email-already-in-use\":\n        return \"Account ${widget._emailController.text} is already in-use.\";\n      case \"invalid-email\":\n        return \"The email you provided is invalid. Please try again with a different email address.\";\n      case \"weak-password\":\n        return \"The password you provided is too weak. Please try again with a new password.\";\n      case \"operation-not-allowed\":\n        return \"Sorry, something went wrong on our end. Please try again later.\";\n      default:\n        return \"Please check your network connection and try again.\";\n    }\n  }\n\n  @override\n  void initState() {\n    _serviceErrorCode = null;\n    _shouldValidateEmail = false;\n    _shouldValidatePassword = false;\n    _obscured = true;\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.all(8.0),\n      child: Card(\n        child: Padding(\n          padding: const EdgeInsets.all(12.0),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Align(\n                alignment: Alignment.topLeft,\n                child: Text(\n                  \"Create an account\",\n                  style: TextStyle(fontSize: 24),\n                ),\n              ),\n              if (_serviceErrorCode != null) ...[\n                Padding(\n                  padding: const EdgeInsets.only(top: 5),\n                  child: MaterialBanner(content: Text(getServiceErrorMessage(_serviceErrorCode!)), backgroundColor: Colors.red.withOpacity(0.5), actions: [\n                    IconButton(\n                      onPressed: () {\n                        setState(() {\n                          _serviceErrorCode = null;\n                        });\n                      },\n                      icon: const Icon(Icons.close),\n                    )\n                  ]),\n                )\n              ],\n              const SizedBox(height: 15),\n              Focus(\n                onFocusChange: (hasFocus) {\n                  if (!hasFocus) {\n                    setState(() {\n                      _shouldValidateEmail = true;\n                    });\n                  } else if (hasFocus && _serviceErrorCode != null) {\n                    setState(() {\n                      _serviceErrorCode = null;\n                    });\n                  }\n                },\n                child: Form(\n                  key: widget._emailValidationKey,\n                  child: TextFormField(\n                    autovalidateMode: _shouldValidateEmail ? AutovalidateMode.always : AutovalidateMode.disabled,\n                    controller: widget._emailController,\n                    keyboardType: TextInputType.emailAddress,\n                    maxLines: 1,\n                    validator: (value) {\n                      if (value == null || value.isEmpty) {\n                        return \"Please enter your email address\";\n                      }\n\n                      String trimmed = value.trim();\n                      if (!RegExp(r\"^[\\p{L}0-9]+@(?:[\\p{L}0-9]+\\.)+[\\p{L}0-9]+$\", unicode: true).hasMatch(trimmed)) {\n                        return \"Please enter a valid email address\";\n                      }\n\n                      if (trimmed.length > 40) {\n                        return \"Email address must less than 40 characters long\";\n                      }\n\n                      return null;\n                    },\n                    textInputAction: TextInputAction.next,\n                    decoration: const InputDecoration(\n                      errorMaxLines: 2,\n                      errorBorder: OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      focusedErrorBorder: OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      hintText: \"Email\",\n                    ),\n                  ),\n                ),\n              ),\n              Focus(\n                onFocusChange: (hasFocus) {\n                  if (!hasFocus) {\n                    setState(() {\n                      _shouldValidatePassword = true;\n                    });\n                  } else if (hasFocus && _serviceErrorCode != null) {\n                    setState(() {\n                      _serviceErrorCode = null;\n                    });\n                  }\n                },\n                child: Form(\n                  key: widget._passwordValidationKey,\n                  child: TextFormField(\n                    autovalidateMode: _shouldValidatePassword ? AutovalidateMode.always : AutovalidateMode.disabled,\n                    controller: widget._passwordController,\n                    enableSuggestions: false,\n                    autocorrect: false,\n                    obscureText: _obscured,\n                    keyboardType: TextInputType.visiblePassword,\n                    maxLines: 1,\n                    validator: (value) {\n                      if (value == null || value.isEmpty) {\n                        return \"Please enter a password\";\n                      }\n\n                      String trimmed = value.trim();\n                      if (trimmed.length != value.length) {\n                        return \"Spaces not allowed in beginning or end of password\";\n                      }\n\n                      if (trimmed.length < 8) {\n                        return \"Password must be at least 8 characters long\";\n                      }\n\n                      if (trimmed.length > 30) {\n                        return \"Password must less than 30 characters long\";\n                      }\n\n                      if (!RegExp(r\"^.*[0-9].*$\").hasMatch(trimmed)) {\n                        return \"Password must contain at least one number\";\n                      }\n\n                      if (!RegExp(r\"^.*[A-Za-z].*$\").hasMatch(trimmed)) {\n                        return \"Password must contain at least one letter\";\n                      }\n\n                      return null;\n                    },\n                    textInputAction: TextInputAction.done,\n                    decoration: InputDecoration(\n                      suffixIcon: Padding(\n                        padding: const EdgeInsets.fromLTRB(0, 0, 4, 0),\n                        child: GestureDetector(\n                          onTap: () {\n                            setState(() {\n                              _obscured = !_obscured;\n                            });\n                          },\n                          child: Icon(\n                            _obscured ? Icons.visibility_rounded : Icons.visibility_off_rounded,\n                            size: 24,\n                          ),\n                        ),\n                      ),\n                      errorMaxLines: 2,\n                      errorBorder: const OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      focusedErrorBorder: const OutlineInputBorder(\n                        borderRadius: BorderRadius.all(Radius.circular(4)),\n                        borderSide: BorderSide(\n                          width: 1,\n                          color: Colors.red,\n                        ),\n                      ),\n                      hintText: \"Password\",\n                    ),\n                  ),\n                ),\n              ),\n              const SizedBox(height: 10),\n              ElevatedButton(\n                style: ElevatedButton.styleFrom(\n                  minimumSize: const Size.fromHeight(40),\n                ),\n                onPressed: () async {\n                  if (widget._emailValidationKey.currentState!.validate() && widget._passwordValidationKey.currentState!.validate()) {\n                    try {\n                      context.loaderOverlay.show();\n                      context.read<AuthenticationService>().signUp(\n                            email: widget._emailController.text.trim(),\n                            password: widget._passwordController.text.trim(),\n                          );\n                    } on FirebaseAuthException catch (e) {\n                      setState(() {\n                        _serviceErrorCode = e.code;\n                      });\n                    } finally {\n                      context.loaderOverlay.hide();\n                    }\n                  }\n                },\n                child: const Text(\"Create account\"),\n              ),\n              const Divider(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/auth/social/google_sign_in_button.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nimport '../authentication_service.dart';\n\nclass GoogleSignInButton extends StatefulWidget {\n  const GoogleSignInButton({Key? key}) : super(key: key);\n\n  @override\n  _GoogleSignInButtonState createState() => _GoogleSignInButtonState();\n}\n\nclass _GoogleSignInButtonState extends State<GoogleSignInButton> {\n  bool _isSigningIn = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16.0),\n      child: _isSigningIn\n          ? const CircularProgressIndicator(\n              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n            )\n          : OutlinedButton(\n              style: ButtonStyle(\n                backgroundColor: MaterialStateProperty.all(Colors.white),\n                shape: MaterialStateProperty.all(\n                  RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(40),\n                  ),\n                ),\n              ),\n              onPressed: () async {\n                setState(() {\n                  _isSigningIn = true;\n                });\n\n                await context.read<AuthenticationService>().signInWithGoogle();\n\n                if (mounted) {\n                  setState(() {\n                    _isSigningIn = false;\n                  });\n                }\n              },\n              child: SizedBox(\n                height: 40,\n                child: Stack(\n                  children: const [\n                    Align(alignment: Alignment.centerLeft, child: Image(image: AssetImage(\"lib/assets/google_logo.png\"), height: 20)),\n                    Align(\n                      alignment: Alignment.center,\n                      child: Padding(\n                        padding: EdgeInsets.only(left: 10),\n                        child: Text(\n                          'Continue with Google',\n                          style: TextStyle(\n                            fontSize: 16,\n                            color: Colors.black54,\n                            fontWeight: FontWeight.w600,\n                          ),\n                        ),\n                      ),\n                    )\n                  ],\n                ),\n              ),\n            ),\n    );\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/auth/unauthenticated.dart",
    "content": "import 'package:auth_tutorial/auth/sign_in.dart';\nimport 'package:auth_tutorial/auth/sign_up.dart';\nimport 'package:flutter/material.dart';\n\nclass Unauthenticated extends StatefulWidget {\n  const Unauthenticated({Key? key}) : super(key: key);\n\n  @override\n  State<Unauthenticated> createState() => _UnauthenticatedState();\n}\n\nclass _UnauthenticatedState extends State<Unauthenticated> {\n  late Mode _mode;\n\n  @override\n  void initState() {\n    _mode = Mode.signUp;\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        _mode == Mode.signUp ? SignUp() : SignIn(),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: _mode == Mode.signUp\n              ? [\n                  const Text(\"Have an account?\"),\n                  TextButton(\n                    onPressed: () {\n                      setState(() {\n                        _mode = Mode.signIn;\n                      });\n                    },\n                    child: const Text(\"Log in\"),\n                  ),\n                ]\n              : [\n                  const Text(\"No account?\"),\n                  TextButton(\n                      onPressed: () {\n                        setState(() {\n                          _mode = Mode.signUp;\n                        });\n                      },\n                      child: const Text(\"Sign up\"))\n                ],\n        )\n      ],\n    );\n  }\n}\n\nenum Mode { signIn, signUp }",
    "language": "dart"
  },
  {
    "path": "lib/auth/verify.dart",
    "content": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:loader_overlay/loader_overlay.dart';\nimport 'package:async/async.dart';\nimport 'package:provider/provider.dart';\n\nimport 'authentication_service.dart';\n\nclass Verify extends StatefulWidget {\n  final String email;\n\n  const Verify({Key? key, required this.email}) : super(key: key);\n\n  @override\n  State<StatefulWidget> createState() => _VerifyState();\n}\n\nclass _VerifyState extends State<Verify> {\n  late RestartableTimer _checkVerifiedLoop;\n  late AuthenticationService _authenticationService;\n\n  @override\n  void initState() {\n    _authenticationService = context.read<AuthenticationService>();\n    _checkVerifiedLoop = RestartableTimer(const Duration(seconds: 1), () async {\n      User? user = await _authenticationService.reload();\n      if (user?.emailVerified ?? false) {\n        _checkVerifiedLoop.cancel();\n        _authenticationService.pushToStream(user);\n      } else {\n        _checkVerifiedLoop.reset();\n      }\n    });\n\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _checkVerifiedLoop.cancel();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        Padding(\n          padding: const EdgeInsets.all(8.0),\n          child: Card(\n            child: Padding(\n              padding: const EdgeInsets.all(12.0),\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  const Align(\n                    alignment: Alignment.topLeft,\n                    child: Text(\n                      'Verify your email',\n                      style: TextStyle(fontSize: 24),\n                    ),\n                  ),\n                  const SizedBox(\n                    height: 10,\n                  ),\n                  Text(\n                    'We\\'ve sent a verification email to ${widget.email}. Please click the link in the email body to get started!',\n                    textAlign: TextAlign.center,\n                  ),\n                  const SizedBox(height: 4),\n                  const Divider(),\n                  TextButton(\n                    child: const Text(\"Resend verification link\"),\n                    onPressed: () async {\n                      context.loaderOverlay.show();\n                      await _authenticationService.sendVerificationEmail();\n                      _checkVerifiedLoop.reset();\n                      context.loaderOverlay.hide();\n                    },\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n        TextButton(\n          onPressed: () async {\n            context.loaderOverlay.show();\n            _checkVerifiedLoop.cancel();\n            await _authenticationService.signOut();\n            context.loaderOverlay.hide();\n          },\n          child: const Text(\"Sign out\"),\n        )\n      ],\n    );\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/database_service.dart",
    "content": "import 'dart:async';\n\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_database/firebase_database.dart';\n\nimport 'models/task.dart';\n\nclass DatabaseService {\n  final DatabaseReference _databaseReference;\n  late Stream<List<Task>> _taskList;\n\n  DatabaseService({required User user}) : _databaseReference = FirebaseDatabase.instance.ref(\"users/${user.uid}\") {\n    _taskList = _databaseReference.onValue.asyncMap((event) => event.snapshot.value).cast<List<Task>>();\n  }\n\n  Stream<List<Task>> get taskList => _taskList;\n\n  void addTask(Task task) {\n    _databaseReference.push().set(task);\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/firebase_options.dart",
    "content": "// File generated by FlutterFire CLI.\n// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members\nimport 'package:firebase_core/firebase_core.dart' show FirebaseOptions;\nimport 'package:flutter/foundation.dart'\n    show defaultTargetPlatform, kIsWeb, TargetPlatform;\n\n/// Default [FirebaseOptions] for use with your Firebase apps.\n///\n/// Example:\n/// ```dart\n/// import 'firebase_options.dart';\n/// // ...\n/// await Firebase.initializeApp(\n///   options: DefaultFirebaseOptions.currentPlatform,\n/// );\n/// ```\nclass DefaultFirebaseOptions {\n  static FirebaseOptions get currentPlatform {\n    if (kIsWeb) {\n      return web;\n    }\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.android:\n        return android;\n      case TargetPlatform.iOS:\n        return ios;\n      case TargetPlatform.macOS:\n        return macos;\n      case TargetPlatform.windows:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for windows - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.linux:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for linux - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      default:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions are not supported for this platform.',\n        );\n    }\n  }\n\n  static const FirebaseOptions web = FirebaseOptions(\n    apiKey: 'AIzaSyCXc32N9Y6lojgraY403UjpQMaYJqb-ODI',\n    appId: '1:808833610407:web:8234b023a8937b1eed6182',\n    messagingSenderId: '808833610407',\n    projectId: 'auth-tutorial-a8960',\n    authDomain: 'auth-tutorial-a8960.firebaseapp.com',\n    storageBucket: 'auth-tutorial-a8960.appspot.com',\n    measurementId: 'G-T2TB5151MW',\n  );\n\n  static const FirebaseOptions android = FirebaseOptions(\n    apiKey: 'AIzaSyBUr141FvuTX1BN5X7fW1T7CftiyTYDDs0',\n    appId: '1:808833610407:android:2e237040a37823d1ed6182',\n    messagingSenderId: '808833610407',\n    projectId: 'auth-tutorial-a8960',\n    storageBucket: 'auth-tutorial-a8960.appspot.com',\n  );\n\n  static const FirebaseOptions ios = FirebaseOptions(\n    apiKey: 'AIzaSyCotFZVSvIxv2GWI8TfQ_MVM5wyorAASjw',\n    appId: '1:808833610407:ios:a2940595f4dfa019ed6182',\n    messagingSenderId: '808833610407',\n    projectId: 'auth-tutorial-a8960',\n    storageBucket: 'auth-tutorial-a8960.appspot.com',\n    iosClientId: '808833610407-qeljv5i90vp0sbj283q0dht9d3nq89gp.apps.googleusercontent.com',\n    iosBundleId: 'com.example.authTutorial',\n  );\n\n  static const FirebaseOptions macos = FirebaseOptions(\n    apiKey: 'AIzaSyCotFZVSvIxv2GWI8TfQ_MVM5wyorAASjw',\n    appId: '1:808833610407:ios:a2940595f4dfa019ed6182',\n    messagingSenderId: '808833610407',\n    projectId: 'auth-tutorial-a8960',\n    storageBucket: 'auth-tutorial-a8960.appspot.com',\n    iosClientId: '808833610407-qeljv5i90vp0sbj283q0dht9d3nq89gp.apps.googleusercontent.com',\n    iosBundleId: 'com.example.authTutorial',\n  );\n}",
    "language": "dart"
  },
  {
    "path": "lib/home.dart",
    "content": "import 'package:auth_tutorial/database_service.dart';\nimport 'package:flutter/material.dart';\n\nclass Home extends StatelessWidget {\n  final DatabaseService databaseService;\n\n  const Home({Key? key, required this.databaseService}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(\"Home\");\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/main.dart",
    "content": "import 'package:auth_tutorial/auth/authentication_wrapper.dart';\nimport 'package:flutter/material.dart';\nimport 'package:loader_overlay/loader_overlay.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Firebase auth tutorial'),\n        ),\n        body: const LoaderOverlay(child: AuthenticationWrapper()),\n      ),\n    );\n  }\n}",
    "language": "dart"
  },
  {
    "path": "lib/models/task.dart",
    "content": "class Task {\n  bool completed;\n  String description;\n\n  Task({required this.description}) : completed = false;\n}",
    "language": "dart"
  },
  {
    "path": "lib/to_do.dart",
    "content": "import 'package:flutter/material.dart';\n\nclass ToDo extends StatelessWidget {\n  const ToDo({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            TextField(\n              onSubmitted: (val) async {\n                print('write $val to database');\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}",
    "language": "dart"
  }
]